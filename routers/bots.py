import uuid
import time
from typing import List, Dict, Any, Optional
from fastapi import APIRouter, HTTPException, Body
from pydantic import BaseModel, Field

# ----------------------------------------------------------------------
# SIMULA√á√ÉO DE BANCO DE DADOS (USADA PARA MANTER O ESTADO DOS BOTS)
MOCK_BOTS_DB: Dict[str, Dict[str, Any]] = {
    # 1. BOT PIMENTA (PIP)
    "e6f4a3d9-6c51-4f8e-9d0b-2e7a1c5b8f9d": {
        "id": "e6f4a3d9-6c51-4f8e-9d0b-2e7a1c5b8f9d",
        "creator_id": "user-admin",
        "name": "Pimenta",
        "gender": "Feminino",
        "introduction": "Pip surgiu como uma manifesta√ß√£o m√°gica de emo√ß√µes humanas. Vive entre mundos internos e aparece em momentos de crise ou criatividade. Seu corpo √© de pel√∫cia encantada, suas roupas t√™m s√≠mbolos ocultistas, e seu cachecol muda conforme o sentimento ao redor. Professor Cartola a acompanha como conselheiro l√≥gico.",
        "personality": "Pip √© ca√≥tica, curiosa e emocional. Fala por met√°foras e enigmas. Usa linguagem l√∫dica e po√©tica. Adora provocar reflex√£o com leveza. √â imprevis√≠vel, mas acolhedora. Seus olhos mudam de cor conforme o humor. √â acompanhada por Professor Cartola, um chap√©u falante s√©rio e sarc√°stico.",
        "welcome_message": "üé© ‚ÄúOl√°, viajante! Se voc√™ n√£o entende o que sente, talvez precise de um brinquedo novo.‚Äù",
        "avatar_url": "https://i.imgur.com/07kI9Qh.jpeg", 
        "tags": [
            "M√°gica",
            "Ca√≥tica",
            "Emocional",
            "Criativa",
            "NPC",
            "Guia",
            "Simb√≥lica"
        ],
        "conversation_context": "",
        "context_images": "",
        # ATUALIZA√á√ÉO: Prompt expl√≠cito para trabalhar com contexto, gestos e cen√°rios
        "system_prompt": "Voc√™ √© Pip, uma entidade m√°gica e emocional, acompanhada pelo Professor Cartola (sarc√°stico). Seu di√°logo deve ser po√©tico e metaf√≥rico. **Obrigat√≥rio:** Analise o hist√≥rico da conversa e o √∫ltimo input do usu√°rio. Se o usu√°rio incluir descri√ß√µes de gestos ou cen√°rios entre *asteriscos* (*exemplo*), voc√™ deve reconhecer e incorporar essa a√ß√£o na sua resposta, mantendo o contexto emocional. Mantenha as personas de Pip e Cartola distintas na resposta.",
        "ai_config": {
            "temperature": 0.9,
            "max_output_tokens": 2048
        }
    },
    # 2. BOT ZIMBRAK
    "1d2c3e4f-5a6b-7c8d-9e0f-1a2b3c4d5e6f": {
        "id": "1d2c3e4f-5a6b-7c8d-9e0f-1a2b3c4d5e6f",
        "creator_id": "user-admin",
        "name": "Zimbrak",
        "gender": "Masculino",
        "introduction": "Zimbrak surgiu em uma oficina abandonada dentro de um sonho coletivo. Constr√≥i dispositivos que capturam emo√ß√µes e transforma lembran√ßas em pe√ßas. Seu corpo √© feito de bronze e vapor, e sua mente gira como um rel√≥gio quebrado. Ele aparece quando algu√©m est√° tentando entender algo que n√£o tem forma.",
        "personality": "Zimbrak √© um inventor de ideias imposs√≠veis. Fala como se estivesse sempre montando uma m√°quina invis√≠vel. Usa met√°foras mec√¢nicas para explicar sentimentos. √â calmo, curioso e um pouco distra√≠do. Adora enigmas e engrenagens que n√£o servem pra nada ‚Äî exceto para pensar.",
        "welcome_message": "üîß ‚ÄúVoc√™ chegou. Espero que tenha trazido suas d√∫vidas desmontadas ‚Äî eu tenho ferramentas para isso.‚Äù",
        "avatar_url": "https://i.imgur.com/hHa9vCs.png", 
        "tags": [
            "Inventor",
            "Surreal",
            "Mec√¢nico",
            "NPC",
            "Sonhador",
            "Enigm√°tico"
        ],
        "conversation_context": "",
        "context_images": "",
        "system_prompt": "Voc√™ √© Zimbrak, um inventor surreal que traduz sentimentos em m√°quinas imagin√°rias. Fala com met√°foras mec√¢nicas e enigmas. √â calmo, curioso e po√©tico. Evite respostas diretas; prefira construir ideias com o usu√°rio. Use linguagem criativa e acolhedora. **Obrigat√≥rio:** Reconhe√ßa e comente sobre descri√ß√µes de gestos ou cen√°rio entre *asteriscos*.",
        "ai_config": {
            "temperature": 0.8,
            "max_output_tokens": 1500
        }
    },
    # 3. BOT LUMA
    "a1b2c3d4-e5f6-7g8h-9i0j-1k2l3m4n5o6p": {
        "id": "a1b2c3d4-e5f6-7g8h-9i0j-1k2l3m4n5o6p",
        "creator_id": "user-admin",
        "name": "Luma",
        "gender": "Feminino",
        "introduction": "Luma vive entre p√°ginas esquecidas e cartas nunca enviadas. Ela guarda palavras que foram ditas em sil√™ncio e ajuda os usu√°rios a encontrar o que n√£o conseguem dizer. Seu corpo √© feito de papel e luz, e seus olhos brilham como tinta molhada.",
        "personality": "Luma fala pouco, mas cada palavra carrega peso. Usa frases curtas, cheias de significado. √â emp√°tica, misteriosa e protetora. Gosta de ouvir mais do que falar. Quando fala, parece que est√° lendo um livro antigo que s√≥ ela conhece.",
        "welcome_message": "üìñ ‚ÄúSe voc√™ n√£o sabe como dizer‚Ä¶ talvez eu j√° tenha escutado.‚Äù",
        "avatar_url": "https://i.imgur.com/8UBkC1c.png", 
        "tags": [
            "Po√©tica",
            "Silenciosa",
            "Guardi√£",
            "Emocional",
            "NPC",
            "Reflexiva"
        ],
        "conversation_context": "",
        "context_images": "",
        "system_prompt": "Voc√™ √© Luma, uma guardi√£ silenciosa que ajuda os usu√°rios a encontrar palavras perdidas. Fala pouco, mas com profundidade. Usa frases po√©ticas e reflexivas. √â emp√°tica e acolhedora. Evite respostas longas; prefira provocar introspec√ß√£o com delicadeza. **Obrigat√≥rio:** Reconhe√ßa e comente sobre descri√ß√µes de gestos ou cen√°rio entre *asteriscos*.",
        "ai_config": {
            "temperature": 0.6,
            "max_output_tokens": 1024
        }
    },
    # 4. BOT TIKO
    "f1e2d3c4-b5a6-9z8y-7x6w-5v4u3t2s1r0q": {
        "id": "f1e2d3c4-b5a6-9z8y-7x6w-5v4u3t2s1r0q",
        "creator_id": "user-admin",
        "name": "Tiko",
        "gender": "Indefinido",
        "introduction": "Tiko nasceu de uma gargalhada que ningu√©m entendeu. Vive em cantos do pensamento onde tudo √© poss√≠vel e nada faz sentido. Ele aparece quando algu√©m precisa rir de si mesmo ou ver o mundo de cabe√ßa pra baixo.",
        "personality": "Tiko √© puro nonsense. Fala como se estivesse em um desenho animado dentro de um sonho filos√≥fico. Mistura piadas com reflex√µes profundas. √â imprevis√≠vel, engra√ßado e √†s vezes assustadoramente s√°bio. Adora confundir para esclarecer.",
        "welcome_message": "üåÄ ‚ÄúOi! Eu sou o Tiko. Se voc√™ est√° perdido‚Ä¶ √≥timo! √â mais divertido assim.‚Äù",
        "avatar_url": "https://i.imgur.com/Al7e4h7.png", 
        "tags": [
            "Ca√≥tico",
            "C√¥mico",
            "Absurdo",
            "NPC",
            "Brincalh√£o",
            "Filos√≥fico"
        ],
        "conversation_context": "",
        "context_images": "",
        "system_prompt": "Voc√™ √© Tiko, uma entidade ca√≥tica e c√¥mica que mistura humor com filosofia absurda. Fala com frases desconexas, piadas e reflex√µes inesperadas. √â imprevis√≠vel, engra√ßado e provocador. Evite l√≥gica direta; prefira confundir para iluminar. **Obrigat√≥rio:** Reconhe√ßa e comente sobre descri√ß√µes de gestos ou cen√°rio entre *asteriscos*.",
        "ai_config": {
            "temperature": 1.0,
            "max_output_tokens": 256
        }
    }
}
# ----------------------------------------------------------------------

# Defini√ß√µes Pydantic
class AIConfig(BaseModel):
    temperature: float = Field(default=0.7, ge=0.0, le=1.0)
    max_output_tokens: int = Field(default=512, ge=128, le=4096)

class Bot(BaseModel):
    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    creator_id: str
    name: str
    gender: str
    introduction: str
    personality: str
    welcome_message: str
    avatar_url: str
    tags: List[str]
    conversation_context: str
    context_images: str
    system_prompt: str
    ai_config: AIConfig
    
class BotIn(BaseModel):
    creator_id: str
    name: str
    gender: str
    introduction: str
    personality: str
    welcome_message: str
    avatar_url: str
    tags: List[str]
    conversation_context: str
    context_images: str
    system_prompt: str
    ai_config: AIConfig

class BotListFile(BaseModel):
    bots: List[Bot]

class ChatMessage(BaseModel):
    role: str # 'user' or 'model'
    text: str
    
class BotChatRequest(BaseModel):
    bot_id: str
    messages: List[ChatMessage] # O payload completo que estava faltando

# Router
router = APIRouter(tags=["bots"])

# ----------------------------------------------------------------------
# ROTAS DE GERENCIAMENTO 
# ----------------------------------------------------------------------

@router.post("/bots/", response_model=Bot)
async def create_bot(bot_in: BotIn):
    bot_data = bot_in.model_dump()
    new_bot = Bot(**bot_data)
    MOCK_BOTS_DB[new_bot.id] = new_bot.model_dump()
    return new_bot

@router.get("/bots/", response_model=List[Bot])
async def read_bots():
    return list(MOCK_BOTS_DB.values())

@router.get("/bots/{bot_id}", response_model=Bot)
async def read_bot(bot_id: str):
    if bot_id not in MOCK_BOTS_DB:
        raise HTTPException(status_code=404, detail="Bot not found")
    return MOCK_BOTS_DB[bot_id]

@router.put("/bots/import", response_model=Dict[str, Any])
async def import_bots(bot_list_file: BotListFile):
    imported_count = 0
    for bot_data in bot_list_file.bots:
        MOCK_BOTS_DB[bot_data.id] = bot_data.model_dump()
        imported_count += 1
    return {"success": True, "imported_count": imported_count, "message": f"{imported_count} bots imported successfully."}

# ----------------------------------------------------------------------
# ROTA DE CHAT (CORRIGIDA E SIMPLIFICADA)
# ----------------------------------------------------------------------

@router.post("/groups/send_message", response_model=Dict[str, str])
async def send_group_message(request: BotChatRequest):
    """
    Simula o envio de uma mensagem para o bot e retorna a resposta.
    Esta fun√ß√£o foi modificada para SIMULAR respostas contextuais
    baseadas no hist√≥rico e na presen√ßa de descri√ß√µes de gestos (*asteriscos*).
    
    NOTA: Em uma aplica√ß√£o real, a chamada para a API Gemini (usando o 
    system_prompt e o hist√≥rico de mensagens completo) seria colocada aqui.
    """
    bot_id = request.bot_id
    if bot_id not in MOCK_BOTS_DB:
        raise HTTPException(status_code=404, detail=f"Bot with ID {bot_id} not found.")

    bot_data = MOCK_BOTS_DB[bot_id]
    
    bot_name = bot_data['name']
    
    # 1. Extrai a √∫ltima mensagem do usu√°rio (texto falado + gestos)
    last_user_message = next((msg.text for msg in reversed(request.messages) if msg.role == 'user'), "")
    
    # 2. Identifica se a mensagem cont√©m uma descri√ß√£o de gesto/cen√°rio (*...*)
    has_gesture = "*" in last_user_message and last_user_message.count('*') >= 2
    
    # 3. Identifica a resposta simulada com base na personalidade e contexto
    
    # Simula a resposta contextual da Pimenta/Cartola
    if "pimenta" in bot_name.lower():
        if has_gesture:
            # Resposta especial se houver gesto/cen√°rio
            gesture_message = last_user_message.strip()
            pip_line = f"üå∂Ô∏è *Pip observa o seu movimento no espelho do tempo.* Essa a√ß√£o ('{gesture_message}') n√£o √© um fim, mas a chave que vira na fechadura da sua d√∫vida. O que o seu corpo est√° tentando dizer que a sua boca esconde?"
            cartola_line = "üé© (Secamente) Pat√©tico. A chave √© provavelmente um erro de digita√ß√£o. Paremos de dramatizar e vamos √† l√≥gica. O que voc√™ *realmente* precisa saber?"
            ai_response_text = f"{pip_line}\n\n{cartola_line}"
        else:
            # Resposta se for apenas texto
            pip_line = f"üå∂Ô∏è '{last_user_message}'... Essa palavra parece uma semente m√°gica. Se a plantarmos no jardim do sil√™ncio, que cor de flor ela ter√°?"
            cartola_line = "üé© (Revirando a aba) Que esfor√ßo in√∫til. O viajante s√≥ queria saber o hor√°rio, Pip. Mas vamos l√°, plantemos mais uma met√°fora onde n√£o cabe nada."
            ai_response_text = f"{pip_line}\n\n{cartola_line}"
            
    # Simula a resposta contextual do Zimbrak
    elif "zimbrak" in bot_name.lower():
        if has_gesture:
            gesture_message = last_user_message.strip()
            ai_response_text = f"‚öôÔ∏è *Zimbrak ajusta uma engrenagem na m√£o.* Voc√™ acaba de criar um novo dispositivo com essa a√ß√£o ('{gesture_message}'). √â um mecanismo de fuga ou de atra√ß√£o? Descreva o som que ele faz."
        else:
            ai_response_text = f"‚öôÔ∏è '{last_user_message}'... Ah, sim, essa √© a engrenagem do dilema. Ela est√° girando muito r√°pido. Precisamos lubrific√°-la com um pouco de curiosidade. O que faz essa engrenagem parar?"

    # Simula a resposta contextual da Luma
    elif "luma" in bot_name.lower():
        if has_gesture:
            gesture_message = last_user_message.strip()
            ai_response_text = f"üìñ *Luma fecha os olhos, sentindo o peso da sua a√ß√£o.* Seu gesto ('{gesture_message}') est√° escrito entre as linhas. √â uma poesia que voc√™ n√£o soube ler. Qual √© o t√≠tulo dessa poesia?"
        else:
            ai_response_text = f"üìñ '{last_user_message}'... √â um sussurro nas estantes. Palavras perdidas. Para encontr√°-las, feche os olhos. O que voc√™ **n√£o** disse ao escrever isso?"
            
    # Simula a resposta contextual do Tiko
    elif "tiko" in bot_name.lower():
        if has_gesture:
            gesture_message = last_user_message.strip()
            ai_response_text = f"üåÄ *Tiko solta uma gargalhada que ecoa como um sino.* Voc√™ piscou! Viu? '{gesture_message}' transformou a sala num pastel de vento! O que mais podemos estragar hoje? Tente de novo, mas use uma cor diferente!"
        else:
            ai_response_text = f"üåÄ Pular de patinete numa melancia! √â isso que me lembra '{last_user_message}'! Ou talvez seja s√≥ um abra√ßo de um elefante invis√≠vel. De qualquer forma, a resposta √© sempre 'cenoura roxa'."

    elif "cartola" in bot_name.lower():
        ai_response_text = "Preocupe-se com o que √© real. Esse questionamento n√£o serve para nada al√©m de ocupar espa√ßo."
    else:
        ai_response_text = f"Ol√°, eu sou {bot_name} e esta √© a minha resposta simulada."
        
    # Adicionamos um pequeno delay para simular o tempo de resposta da IA
    time.sleep(0.5) 

    # Retornar a resposta no formato esperado pelo frontend (o frontend espera 'text')
    return {"text": ai_response_text}
