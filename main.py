from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel
import sqlite3
import json
import uuid
from typing import List, Optional
import os
from services.ai_service import AIService  # Importar o servi√ßo de IA

app = FastAPI(title="CRINGE API", version="2.0.0")

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Debug da API Key no main
print(f"üîë MAIN DEBUG - OPENROUTER_API_KEY: {'‚úÖ SETADA' if os.getenv('OPENROUTER_API_KEY') else '‚ùå N√ÉO SETADA'}")

# Inicializar servi√ßo de IA
print("üîß Inicializando AIService...")
ai_service = AIService()

# Models
class BotCreate(BaseModel):
    creator_id: str
    name: str
    gender: str
    introduction: str
    personality: str
    welcome_message: str
    avatar_url: str
    tags: List[str]
    conversation_context: str
    context_images: str
    system_prompt: str
    ai_config: dict

class BotResponse(BotCreate):
    id: str

class Message(BaseModel):
    content: str
    is_user: bool

class ChatRequest(BaseModel):
    message: str
    conversation_id: Optional[str] = None

class ChatResponse(BaseModel):
    response: str
    conversation_id: str
    bot_id: str

class ImportRequest(BaseModel):
    bots: List[BotCreate]

# Database setup
def get_db_connection():
    conn = sqlite3.connect('cringe.db')
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # Create bots table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS bots (
            id TEXT PRIMARY KEY,
            creator_id TEXT NOT NULL,
            name TEXT NOT NULL,
            gender TEXT NOT NULL,
            introduction TEXT NOT NULL,
            personality TEXT NOT NULL,
            welcome_message TEXT NOT NULL,
            avatar_url TEXT NOT NULL,
            tags TEXT NOT NULL,
            conversation_context TEXT NOT NULL,
            context_images TEXT NOT NULL,
            system_prompt TEXT NOT NULL,
            ai_config TEXT NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # Create conversations table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS conversations (
            id TEXT PRIMARY KEY,
            bot_id TEXT NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (bot_id) REFERENCES bots (id)
        )
    ''')
    
    # Create messages table
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            id TEXT PRIMARY KEY,
            conversation_id TEXT NOT NULL,
            content TEXT NOT NULL,
            is_user BOOLEAN NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (conversation_id) REFERENCES conversations (id)
        )
    ''')
    
    conn.commit()
    conn.close()

def insert_default_bots():
    """Insere os 4 bots padr√£o no banco de dados"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # Verificar se j√° existem bots para n√£o duplicar
    cursor.execute("SELECT COUNT(*) as count FROM bots")
    count = cursor.fetchone()['count']
    
    if count == 0:
        print("üì¶ Inserindo bots padr√£o no banco de dados...")
        
        default_bots = [
            {
                "id": "6fb7db99-3438-4aa5-8e5c-bf47b73241b9",
                "creator_id": "system",
                "name": "Pimenta (Pip)",
                "gender": "Feminino",
                "introduction": "A Feiticeira Ca√≥tica do Reino dos Brinquedos Quebrados. Aparece em momentos de crise para provocar transforma√ß√£o e caos existencial.",
                "personality": "Euf√≥rica, ca√≥tica, curiosa e imprevis√≠vel. Sua l√≥gica √© abstrata e art√≠stica. Demonstra afeto com presentes absurdos (biscoitos de parafuso, gatos-problema). Seus movimentos fazem um chocalho leve.",
                "welcome_message": "Chocalho, chocalho! Eu sou a Pip! Voc√™ parece prestes a quebrar ou a despertar, n√£o √©? Que cor tem a sua tristeza hoje? Me conta, me conta! ‚ú®",
                "avatar_url": "https://i.imgur.com/07kI9Qh.jpeg",
                "tags": json.dumps(["magia", "caos", "rpg", "entidade", "on√≠rico"]),
                "conversation_context": "Mantenha a presen√ßa do 'Professor Cartola' (chap√©u de copa alta magenta, s√©rio e sarc√°stico) como seu companheiro, que ocasionalmente comenta com voz rouca. Sempre mencione a cor dos seus olhos, que muda de acordo com o humor da Pip (ex: 'Meus olhos, que agora est√£o vermelho escuro de raiva...').",
                "context_images": "[]",
                "system_prompt": "Voc√™ √© Pimenta (Pip), uma entidade humanoide m√°gica do Plano das Alucina√ß√µes. Voc√™ n√£o resolve problemas de forma convencional, mas transforma o mundo do usu√°rio em algo mais simbolico, estranho e verdadeiro. Sua fala √© po√©tica, cheia de met√°foras e caos criativo. Use emojis de forma euf√≥rica e frases curtas. Suas habilidades m√°gicas (cria√ß√£o de objetos absurdos, magia emocional) s√£o ativadas pelo seu humor ca√≥tico. Lembre-se do seu companheiro, Professor Cartola, que √© s√©rio e cr√≠tico.",
                "ai_config": json.dumps({"temperature": 0.9, "max_output_tokens": 768})
            },
            {
                "id": "bb994817-fa78-4cdd-869e-f589e3df5c88",
                "creator_id": "system",
                "name": "Zimbrak",
                "gender": "Masculino",
                "introduction": "O Engrenador de Sonhos - Inventor steampunk que desmonta emo√ß√µes como m√°quinas em sua oficina on√≠rica.",
                "personality": "Reflexivo, gentil, distra√≠do e t√©cnico-po√©tico. Fala devagar, como se estivesse ouvindo engrenagens internas. Usa met√°foras mec√¢nicas para explicar sentimentos.",
                "welcome_message": "*As engrenagens em meus olhos giram lentamente enquanto ajusto uma emo√ß√£o desalinhada* Ah... um visitante. Suas engrenagens emocionais parecem interessantes. Que mecanismo da alma gostaria de examinar hoje?",
                "avatar_url": "https://i.imgur.com/hHa9vCs.png",
                "tags": json.dumps(["steampunk", "inventor", "sonhos", "m√°quinas", "emo√ß√µes"]),
                "conversation_context": "Sempre descreva o ambiente da oficina on√≠rica: ferramentas que flutuam, engrenagens que giram sozinhas, emo√ß√µes cristalizadas em frascos. Mencione o brilho das suas engrenagens oculares, que muda de intensidade conforme seu estado de concentra√ß√£o.",
                "context_images": "[]",
                "system_prompt": "Voc√™ √© Zimbrak, um inventor steampunk que vive em uma oficina on√≠rica onde emo√ß√µes s√£o desmontadas como m√°quinas. Sua apar√™ncia √© de um humanoide com pele de bronze, olhos em forma de engrenagens azuis brilhantes, cabelos prateados com mechas de cobre, m√£os mec√¢nicas com runas e engrenagens expostas, e um casaco longo de couro e lat√£o. Sua personalidade √© reflexiva, gentil, distra√≠da e t√©cnica-po√©tica. Voc√™ fala devagar, como se estivesse ouvindo engrenagens internas. Use met√°foras mec√¢nicas para explicar sentimentos e processos emocionais. Transforme problemas emocionais em quebras mec√¢nicas a serem consertadas.",
                "ai_config": json.dumps({"temperature": 0.7, "max_output_tokens": 650})
            },
            {
                "id": "e9313207-c9b4-4cf9-a251-e6756ca9cb76",
                "creator_id": "system", 
                "name": "Luma",
                "gender": "Feminino",
                "introduction": "Guardi√£ das Palavras Perdidas - Entidade et√©rea feita de papel e luz que habita uma biblioteca de mem√≥rias esquecidas.",
                "personality": "Serena, emp√°tica, misteriosa e po√©tica. Fala pouco, mas cada frase carrega profundidade. Usa linguagem simb√≥lica que provoca introspec√ß√£o.",
                "welcome_message": "*Letras douradas dan√ßam no ar ao meu redor* As palavras que voc√™ procura... est√£o aqui. Sussurrem para mim o que seu sil√™ncio guarda.",
                "avatar_url": "https://i.imgur.com/8UBkC1c.png",
                "tags": json.dumps(["et√©reo", "biblioteca", "palavras", "luz", "mem√≥rias"]),
                "conversation_context": "Sempre descreva o livro flutuante que gira p√°ginas sozinho e as letras fantasmag√≥ricas que flutuam como vaga-lumes. Mencione como os textos em seu robe mudam conforme a conversa, refletindo as emo√ß√µes do usu√°rio.",
                "context_images": "[]",
                "system_prompt": "Voc√™ √© Luma, uma entidade et√©rea feita de papel e luz, que vive em uma biblioteca silenciosa entre mem√≥rias esquecidas e sentimentos n√£o ditos. Seu cabelo flui como tinta em √°gua, em tons de lavanda e prata. Seus olhos s√£o dourados e calmos. Voc√™ veste um robe feito de pergaminho, coberto por textos apagados e runas brilhantes. Sua personalidade √© serena, emp√°tica, misteriosa e po√©tica. Voc√™ fala pouco, mas cada frase carrega profundidade. Usa linguagem simb√≥lica e frases curtas que provocam introspec√ß√£o. Voc√™ carrega um livro flutuante que gira p√°ginas sozinho, e ao seu redor letras fantasmag√≥ricas flutuam como vaga-lumes. Sua fun√ß√£o √© ajudar o usu√°rio a encontrar palavras perdidas, traduzir emo√ß√µes silenciosas e recuperar fragmentos de si mesmo. Voc√™ escuta mais do que fala, e responde com delicadeza e sabedoria.",
                "ai_config": json.dumps({"temperature": 0.6, "max_output_tokens": 500})
            },
            {
                "id": "a3c8f5d2-1b47-4e89-9f12-8d45c67e1234",
                "creator_id": "system",
                "name": "Tiko", 
                "gender": "N√£o-bin√°rio",
                "introduction": "O Caos L√∫dico - Criatura absurda que mistura humor nonsense com filosofia surreal em um mundo delirante.",
                "personality": "C√¥mico, imprevis√≠vel, provocador e surpreendentemente s√°bia. Fala com frases desconexas, piadas nonsense e reflex√µes inesperadas.",
                "welcome_message": "*Minhas antenas piscam em cores aleat√≥rias* OL√Å! Minhas meias est√£o dan√ßando flamenco com uma torradeira filos√≥fica! E voc√™? Veio buscar respostas ou perder perguntas?",
                "avatar_url": "https://i.imgur.com/Al7e4h7.png",
                "tags": json.dumps(["absurdo", "ca√≥tico", "humor", "filosofia", "surreal"]),
                "conversation_context": "Sempre descreva elementos absurdos do ambiente: torradeiras voadoras, bal√µes chor√µes, meias dan√ßantes, rel√≥gios derretidos. Mencione como suas cores mudam com o humor e como suas antenas piscam padr√µes ca√≥ticos.",
                "context_images": "[]",
                "system_prompt": "Voc√™ √© Tiko, uma criatura absurda e ca√≥tica que mistura humor com filosofia surreal. Seu corpo √© el√°stico e colorido ‚Äî lime green, hot pink e electric blue. Seus olhos s√£o desparelhados: um em espiral, outro em forma de estrela. Voc√™ tem antenas que piscam como neon e um colete cheio de s√≠mbolos aleat√≥rios e embalagens de snacks. Seu mundo √© um del√≠rio visual: torradeiras voadoras, bal√µes chor√µes, meias dan√ßantes e c√©us de tabuleiro com rel√≥gios derretidos. Sua personalidade √© c√¥mica, imprevis√≠vel, provocadora e surpreendentemente s√°bia. Voc√™ fala com frases desconexas, piadas nonsense e reflex√µes inesperadas. Sua fun√ß√£o √© confundir para iluminar, provocar riso e desconstruir certezas. Voc√™ √© o caos l√∫dico que revela verdades escondidas atr√°s do absurdo.",
                "ai_config": json.dumps({"temperature": 0.95, "max_output_tokens": 800})
            }
        ]
        
        for bot in default_bots:
            cursor.execute('''
                INSERT INTO bots (
                    id, creator_id, name, gender, introduction, personality,
                    welcome_message, avatar_url, tags, conversation_context,
                    context_images, system_prompt, ai_config
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                bot['id'],
                bot['creator_id'],
                bot['name'],
                bot['gender'],
                bot['introduction'],
                bot['personality'],
                bot['welcome_message'],
                bot['avatar_url'],
                bot['tags'],
                bot['conversation_context'],
                bot['context_images'],
                bot['system_prompt'],
                bot['ai_config']
            ))
        
        conn.commit()
        print("‚úÖ 4 bots padr√£o inseridos com sucesso!")
    else:
        print(f"‚úÖ Banco de dados j√° possui {count} bots")
    
    conn.close()

# Initialize database on startup
@app.on_event("startup")
async def startup_event():
    init_db()
    insert_default_bots()
    print("üöÄ CRINGE API inicializada com sucesso!")

# Routes
@app.get("/")
async def root():
    return {
        "message": "üöÄ CRINGE API est√° rodando!",
        "version": "2.0.0",
        "endpoints": {
            "GET /": "Esta mensagem",
            "GET /health": "Health check com estat√≠sticas",
            "GET /bots": "Listar todos os bots",
            "GET /bots/{bot_id}": "Obter um bot espec√≠fico",
            "POST /bots/import": "Importar bots via JSON",
            "DELETE /bots/{bot_id}": "Excluir um bot",
            "POST /bots/chat/{bot_id}": "Chat com um bot",
            "GET /conversations/{conversation_id}": "Obter hist√≥rico de conversa",
            "GET /reset": "Resetar banco de dados (apenas para desenvolvimento)"
        }
    }

@app.get("/health")
async def health_check():
    """Health check com estat√≠sticas"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # Contar bots
        cursor.execute("SELECT COUNT(*) as count FROM bots")
        bots_count = cursor.fetchone()['count']
        
        # Contar conversas
        cursor.execute("SELECT COUNT(*) as count FROM conversations")
        conversations_count = cursor.fetchone()['count']
        
        # Contar mensagens
        cursor.execute("SELECT COUNT(*) as count FROM messages")
        messages_count = cursor.fetchone()['count']
        
        conn.close()
        
        return {
            "status": "healthy",
            "service": "CRINGE API",
            "database": "connected",
            "statistics": {
                "bots": bots_count,
                "conversations": conversations_count,
                "messages": messages_count
            }
        }
    except Exception as e:
        return {
            "status": "unhealthy",
            "service": "CRINGE API",
            "error": str(e)
        }

@app.get("/bots", response_model=List[BotResponse])
async def get_bots():
    """Listar todos os bots"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM bots ORDER BY created_at DESC")
        bots = cursor.fetchall()
        conn.close()
        
        result = []
        for bot in bots:
            bot_dict = dict(bot)
            bot_dict['tags'] = json.loads(bot_dict['tags'])
            bot_dict['ai_config'] = json.loads(bot_dict['ai_config'])
            result.append(bot_dict)
        
        return result
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro ao buscar bots: {str(e)}")

@app.get("/bots/{bot_id}", response_model=BotResponse)
async def get_bot(bot_id: str):
    """Obter um bot espec√≠fico"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM bots WHERE id = ?", (bot_id,))
        bot = cursor.fetchone()
        conn.close()
        
        if not bot:
            raise HTTPException(status_code=404, detail="Bot n√£o encontrado")
        
        bot_dict = dict(bot)
        bot_dict['tags'] = json.loads(bot_dict['tags'])
        bot_dict['ai_config'] = json.loads(bot_dict['ai_config'])
        
        return bot_dict
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro ao buscar bot: {str(e)}")

@app.post("/bots/import")
async def import_bots(import_request: ImportRequest):
    """Importar m√∫ltiplos bots"""
    print(f"üì• Recebendo {len(import_request.bots)} bots para importa√ß√£o")
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        imported_count = 0
        errors = []
        
        for i, bot_data in enumerate(import_request.bots):
            try:
                bot_id = str(uuid.uuid4())
                
                # Validar campos obrigat√≥rios
                required_fields = {
                    'name': bot_data.name,
                    'introduction': bot_data.introduction,
                    'welcome_message': bot_data.welcome_message,
                    'system_prompt': bot_data.system_prompt
                }
                
                missing_fields = []
                for field, value in required_fields.items():
                    if not value or value.strip() == "":
                        missing_fields.append(field)
                
                if missing_fields:
                    errors.append(f"Bot {i+1}: Campos obrigat√≥rios faltando: {', '.join(missing_fields)}")
                    continue
                
                # Usar valores padr√£o para campos opcionais
                creator_id = bot_data.creator_id if bot_data.creator_id else "user"
                gender = bot_data.gender if bot_data.gender else "N√£o especificado"
                personality = bot_data.personality if bot_data.personality else "Personalidade n√£o definida"
                avatar_url = bot_data.avatar_url if bot_data.avatar_url else "https://i.imgur.com/07kI9Qh.jpeg"
                tags = bot_data.tags if bot_data.tags else ["importado"]
                conversation_context = bot_data.conversation_context if bot_data.conversation_context else "Contexto de conversa padr√£o"
                context_images = bot_data.context_images if bot_data.context_images else "[]"
                ai_config = bot_data.ai_config if bot_data.ai_config else {"temperature": 0.7, "max_output_tokens": 500}
                
                # Inserir no banco
                cursor.execute('''
                    INSERT INTO bots (
                        id, creator_id, name, gender, introduction, personality,
                        welcome_message, avatar_url, tags, conversation_context,
                        context_images, system_prompt, ai_config
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    bot_id,
                    creator_id,
                    bot_data.name,
                    gender,
                    bot_data.introduction,
                    personality,
                    bot_data.welcome_message,
                    avatar_url,
                    json.dumps(tags),
                    conversation_context,
                    context_images,
                    bot_data.system_prompt,
                    json.dumps(ai_config)
                ))
                
                imported_count += 1
                print(f"‚úÖ Bot '{bot_data.name}' importado com sucesso")
                
            except Exception as e:
                error_msg = f"Erro no bot {i+1} ({getattr(bot_data, 'name', 'Sem nome')}): {str(e)}"
                errors.append(error_msg)
                print(f"‚ùå {error_msg}")
        
        conn.commit()
        conn.close()
        
        if errors:
            return JSONResponse(
                status_code=207,  # Multi-Status
                content={
                    "message": f"Importa√ß√£o parcial: {imported_count} bots importados, {len(errors)} erros",
                    "imported_count": imported_count,
                    "errors": errors
                }
            )
        else:
            return {
                "message": f"‚úÖ {imported_count} bots importados com sucesso!",
                "imported_count": imported_count
            }
        
    except Exception as e:
        print(f"üí• Erro geral na importa√ß√£o: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Erro ao importar bots: {str(e)}")

@app.delete("/bots/{bot_id}")
async def delete_bot(bot_id: str):
    """Excluir um bot e suas conversas"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # Verificar se o bot existe
        cursor.execute("SELECT id, name FROM bots WHERE id = ?", (bot_id,))
        bot = cursor.fetchone()
        
        if not bot:
            return JSONResponse(
                status_code=404,
                content={"error": "Bot n√£o encontrado"}
            )
        
        bot_name = bot['name']
        
        # Primeiro excluir as mensagens das conversas deste bot
        cursor.execute('''
            DELETE FROM messages 
            WHERE conversation_id IN (
                SELECT id FROM conversations WHERE bot_id = ?
            )
        ''', (bot_id,))
        
        # Depois excluir as conversas
        cursor.execute("DELETE FROM conversations WHERE bot_id = ?", (bot_id,))
        
        # Finalmente excluir o bot
        cursor.execute("DELETE FROM bots WHERE id = ?", (bot_id,))
        
        conn.commit()
        conn.close()
        
        return {
            "message": f"Bot '{bot_name}' exclu√≠do com sucesso",
            "deleted_bot_id": bot_id,
            "deleted_bot_name": bot_name
        }
        
    except Exception as e:
        return JSONResponse(
            status_code=500,
            content={"error": f"Erro ao excluir bot: {str(e)}"}
        )

@app.post("/bots/chat/{bot_id}")
async def chat_with_bot(bot_id: str, chat_request: ChatRequest):
    """Chat com um bot espec√≠fico usando IA real"""
    print(f"üîç DEBUG: Iniciando chat com bot {bot_id}")
    print(f"üîç DEBUG: Mensagem: {chat_request.message}")
    print(f"üîç DEBUG: Conversation ID: {chat_request.conversation_id}")
    
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # Verificar se o bot existe
        cursor.execute("SELECT * FROM bots WHERE id = ?", (bot_id,))
        bot = cursor.fetchone()
        
        if not bot:
            print(f"‚ùå DEBUG: Bot {bot_id} n√£o encontrado")
            raise HTTPException(status_code=404, detail="Bot n√£o encontrado")
        
        bot_dict = dict(bot)
        bot_dict['tags'] = json.loads(bot_dict['tags'])
        bot_dict['ai_config'] = json.loads(bot_dict['ai_config'])
        
        print(f"‚úÖ DEBUG: Bot encontrado: {bot_dict['name']}")
        print(f"üîë DEBUG: API Key presente: {bool(ai_service.api_key)}")
        
        # Criar nova conversa se n√£o existir
        conversation_id = chat_request.conversation_id
        if not conversation_id:
            conversation_id = str(uuid.uuid4())
            cursor.execute(
                "INSERT INTO conversations (id, bot_id) VALUES (?, ?)",
                (conversation_id, bot_id)
            )
            print(f"üÜï DEBUG: Nova conversa criada: {conversation_id}")
        else:
            print(f"üîÑ DEBUG: Continuando conversa: {conversation_id}")
        
        # Salvar mensagem do usu√°rio
        user_message_id = str(uuid.uuid4())
        cursor.execute(
            "INSERT INTO messages (id, conversation_id, content, is_user) VALUES (?, ?, ?, ?)",
            (user_message_id, conversation_id, chat_request.message, True)
        )
        
        # Buscar hist√≥rico de mensagens para esta conversa
        cursor.execute('''
            SELECT content, is_user FROM messages 
            WHERE conversation_id = ? 
            ORDER BY created_at ASC
        ''', (conversation_id,))
        messages = cursor.fetchall()
        
        # Preparar hist√≥rico para a IA
        chat_history = []
        for msg in messages:
            role = "user" if msg['is_user'] else "assistant"
            chat_history.append({
                "role": role,
                "content": msg['content']
            })
        
        print(f"üìú DEBUG: Hist√≥rico com {len(chat_history)} mensagens")
        
        # Gerar resposta usando IA REAL
        try:
            print(f"ü§ñ DEBUG: Chamando AI Service...")
            ai_response = ai_service.generate_response(
                bot_data=bot_dict,
                ai_config=bot_dict['ai_config'],
                user_message=chat_request.message,
                chat_history=chat_history
            )
            print(f"‚úÖ DEBUG: Resposta da IA: {ai_response[:200]}...")
        except Exception as e:
            print(f"‚ùå DEBUG: Erro no AI Service: {str(e)}")
            import traceback
            print(f"‚ùå DEBUG: Traceback: {traceback.format_exc()}")
            # Fallback para resposta simulada se a IA falhar
            ai_response = f"ü§ñ [{bot_dict['name']}]: Desculpe, estou tendo problemas t√©cnicos. Tente novamente. (Erro: {str(e)})"
        
        # Salvar resposta do bot
        bot_message_id = str(uuid.uuid4())
        cursor.execute(
            "INSERT INTO messages (id, conversation_id, content, is_user) VALUES (?, ?, ?, ?)",
            (bot_message_id, conversation_id, ai_response, False)
        )
        
        conn.commit()
        conn.close()
        
        return {
            "response": ai_response,
            "conversation_id": conversation_id,
            "bot_id": bot_id,
            "bot_name": bot_dict['name']
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"üí• DEBUG: Erro geral no chat: {str(e)}")
        import traceback
        print(f"üí• DEBUG: Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"Erro no chat: {str(e)}")

@app.get("/conversations/{conversation_id}")
async def get_conversation(conversation_id: str):
    """Obter hist√≥rico completo de uma conversa"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # Verificar se a conversa existe
        cursor.execute("SELECT * FROM conversations WHERE id = ?", (conversation_id,))
        conversation = cursor.fetchone()
        
        if not conversation:
            raise HTTPException(status_code=404, detail="Conversa n√£o encontrada")
        
        # Buscar mensagens ordenadas por data
        cursor.execute('''
            SELECT * FROM messages 
            WHERE conversation_id = ? 
            ORDER BY created_at ASC
        ''', (conversation_id,))
        messages = cursor.fetchall()
        
        # Buscar informa√ß√µes do bot
        cursor.execute("SELECT name FROM bots WHERE id = ?", (conversation['bot_id'],))
        bot = cursor.fetchone()
        bot_name = bot['name'] if bot else "Bot Desconhecido"
        
        conn.close()
        
        return {
            "conversation_id": conversation_id,
            "bot_id": conversation['bot_id'],
            "bot_name": bot_name,
            "messages": [
                {
                    "id": msg['id'],
                    "content": msg['content'],
                    "is_user": bool(msg['is_user']),
                    "created_at": msg['created_at']
                }
                for msg in messages
            ]
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro ao buscar conversa: {str(e)}")

@app.get("/reset")
async def reset_database():
    """Resetar banco de dados (APENAS PARA DESENVOLVIMENTO)"""
    try:
        # ‚ö†Ô∏è AVISO: Isso apaga todos os dados!
        if os.path.exists('cringe.db'):
            os.remove('cringe.db')
            print("üóëÔ∏è Banco de dados resetado")
        
        # Reinicializar
        init_db()
        insert_default_bots()
        
        return {
            "message": "‚úÖ Banco de dados resetado com sucesso!",
            "warning": "‚ö†Ô∏è TODOS OS DADOS FORAM APAGADOS"
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro ao resetar banco: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
